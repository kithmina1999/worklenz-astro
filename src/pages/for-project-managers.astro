---
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import Sectionhead from "@components/sectionhead.astro";
import { getCollection } from "astro:content";
import { Icon } from "astro-icon/components";
import Picture from "astro/components/Picture.astro";
import ManagerImage from "../assets/project-managers.png";
import loadingImage from "../assets/loading.gif";


const templateContent = await getCollection("managers");
---

<Layout title="Managers">
  <Container>
    <Sectionhead>
      <Fragment slot="title"
        >
        Meet deadlines without hassle</Fragment
      >
      <Fragment slot="desc">
        With WorkLenz, project managers can enhance efficiency, streamline collaboration, and on-time project delivery.
      </Fragment>
      <Fragment slot="image">
        <Picture
        src={ManagerImage}
        alt="Feature image"
        formats={["avif", "webp"]}
        loading="eager"
        width={500}
        />
      </Fragment>
      <Fragment slot="link">Get Started</Fragment>
    </Sectionhead>

    <main class="mt-16">
      {
        templateContent.map((item) => (
          <div>
            {item.data.source.map((subItem,index) => (
              <div
            class={`hidden items-center mt-20 md:grid md:grid-cols-2 gap-8 ${index % 2 === 0 ? "justify-items-start" : "justify-items-end"}`}>
            {index % 2 === 0 ? (
              <>
                <div class="flex flex-col">
                  <p class="text-3xl font-bold">{subItem.title}</p>
                  <div class="mt-6 flex flex-col">
                    {subItem.content.map((subNestedItem) => (
                      <div class="flex flex-row items-center gap-4 mt-2">
                        <div>
                          <Icon name="ph:check" class="w-6 h-6 text-blue-400" />
                        </div>
                        <label class="text-lg font-semibold">
                          {subNestedItem.subTitle} :{" "}
                          <span class="text-sm font-normal text-gray-500">
                            {subNestedItem.explanation}
                          </span>
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
                <div class="mx-auto">
                    <div class="video-container">
                      <div class="video-placeholder" id={`placeholder-${index}`}>
                        <Picture src={loadingImage} alt="Loading" width={50}/>
                      </div>
                      <video id={`video-${index}`} muted loop controls class="hidden">
                        <source src={subItem.video.src} type="video/mp4" />
                      </video>
                    </div>
                  </div>
              </>
            ) : (
              <>
                <div class="mx-auto">
                    <div class="video-container">
                      <div class="video-placeholder" id={`placeholder-${index}`}>
                        <Picture src={loadingImage} alt="Loading" width={50}/>
                      </div>
                      <video id={`video-${index}`} muted loop controls class="hidden">
                        <source src={subItem.video.src} type="video/mp4" />
                      </video>
                    </div>
                  </div>
                <div class="flex flex-col">
                  <p class="text-3xl font-bold">{subItem.title}</p>
                  <div class="mt-6 flex flex-col">
                    {subItem.content.map((subNestedItem) => (
                      <div class="flex flex-row items-center gap-4 mt-2">
                        <div>
                          <Icon name="ph:check" class="w-6 h-6 text-blue-400" />
                        </div>
                        <label class="text-lg font-semibold">
                          {subNestedItem.subTitle} :{" "}
                          <span class="text-sm font-normal text-gray-500">
                            {subNestedItem.explanation}
                          </span>
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
              </>
            )}
          </div>
          
          <div class="md:hidden items-center grid mt-20 gap-8">
            <div class="flex flex-col">
                  <p class="text-3xl font-bold">{subItem.title}</p>
                  <div class="mt-6 flex flex-col">
                    {subItem.content.map((subNestedItem) => (
                      <div class="flex flex-row items-center gap-4 mt-2">
                        <div>
                          <Icon name="ph:check" class="w-6 h-6 text-blue-400" />
                        </div>
                        <label class="text-lg font-semibold">
                          {subNestedItem.subTitle} :{" "}
                          <span class="text-sm font-normal text-gray-500">
                            {subNestedItem.explanation}
                          </span>
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
                <div>
                  <video  muted loop controls>
                    <source src={subItem.video.src} type="video/mp4" />
                  </video>
                </div>
          </div>
            ))}
          </div>
        ))
      }
    </main>
  </Container>
  <script is:inline>
    function initializeVideos() {
      console.log('Initializing videos...');
      const videos = document.querySelectorAll("video");
      if (videos.length === 0) {
        console.log('No videos found');
        return;
      }

      videos.forEach((video, index) => {
        video.addEventListener("loadedmetadata", () => {
          console.log(`Video ${index} metadata loaded`);
          const placeholder = document.getElementById(`placeholder-${index}`);
          if (placeholder) {
            placeholder.classList.add("hidden");
            console.log(`Placeholder ${index} hidden`);
          }
          video.classList.remove("hidden");
          console.log(`Video ${index} displayed`);
        });
      });
    }

    function reinitializeVideos() {
      console.log('Reinitializing videos...');
      initializeVideos();
    }

    function checkUrlChange(callback) {
      let lastUrl = location.href;
      new MutationObserver(() => {
        const url = location.href;
        if (url !== lastUrl) {
          lastUrl = url;
          callback();
        }
      }).observe(document, { subtree: true, childList: true });
    }

    document.addEventListener('DOMContentLoaded', () => {
      console.log('DOMContentLoaded event');
      reinitializeVideos();
    });

    window.addEventListener('pageshow', (event) => {
      console.log('Pageshow event', event);
      reinitializeVideos();
    });

    document.addEventListener('visibilitychange', () => {
      console.log('Visibility change event:', document.visibilityState);
      if (document.visibilityState === 'visible') {
        reinitializeVideos();
      }
    });

    window.onpopstate = function(event) {
      console.log('Popstate event', event);
      reinitializeVideos();
    };

    checkUrlChange(() => {
      console.log('URL change detected');
      reinitializeVideos();
    });

    // Reinitialize videos on load to ensure they are set up properly.
    reinitializeVideos();
  </script>
</Layout>
